var documenterSearchIndex = {"docs":
[{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"This section goes over how to install SDDPlab.jl and its basic functionality.","category":"page"},{"location":"man/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"SDDPlabjl isn't registered as a julia package, so it must be installed from the GitHub repository. It is required to have julia installed on version 1.10 or higher.","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"On linux platforms","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"export JULIA_PKG_USE_CLI_GIT=true\njulia\n]\nadd git@github.com:rjmalves/sddp-lab.git","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"On Windows platforms, the following commands must be run on PowerShell","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"$env:JULIA_PKG_USE_CLI_GIT=true\njulia\n]\nadd git@github.com:rjmalves/sddp-lab.git","category":"page"},{"location":"man/getting_started/#Usage-Example","page":"Getting Started","title":"Usage Example","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Although it is a package, SDDPlab is mainly intended to be used through the single entrypoint function main()","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using SDDPlab\nusing GLPK\n\ncase_data = \"path/to/case/data/directory\"\noptimizer = GLPK.Optimizer\n\nSDDPlab.main(case_data, optimizer)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"As shown in the example, main() takes two mandatoy arguments","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"data_dir: path to a directory containing a case's input data\noptimizer: an optimizer, i.e. GLPK.Optimizer","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"otimizer was set to GLPK in the example, but any julia implementation of a linear program optimizer can be used, open or commercial. It the latter case, is left to the user to appropriately set up keys and licenses when running the function.","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"data_dir should be a followable path (either full or relative to the current working directory) to a directory containing all input files expected by SDDPlab.jl, in the appropriate structure. This filesystem is briefly discussed in the following section. <!–-TODO: link to long form Input section–>","category":"page"},{"location":"man/getting_started/#Inputs","page":"Getting Started","title":"Inputs","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"An input directory should follow a specific structure. Take for instance one of the example cases in the package, 1dsin_ar","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"1dsin_ar/\n├── main.jsonc\n├── data/\n│   ├── algorithm.jsonc\n│   ├── buses.csv\n│   ├── constraints.jsonc\n│   ├── hydros.csv\n│   ├── inflow_scenarios.jsonc\n│   ├── lines.csv\n│   ├── load.csv\n│   ├── scenarios.jsonc\n│   ├── stages.csv\n│   ├── system.jsonc\n│   ├── tasks.jsonc\n│   ├── thermals.csv\n│   └── thermals_with_inflex.csv","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"As can be noted, SDDPlab has a highly hierachical file structure, meant to completely modularize each aspect of the program's execution into a separate input file. There must always be a main.jsonc file which maps out the remaining input files. The contents of this file are as such","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"{\n    \"inputs\": {\n        \"path\": \"data\",\n        // Each file defines settings for a specific\n        // component of the lab\n        \"files\": {\n            // Settings regarding the tasks that are being\n            // performed in the current run\n            // (policy optimization, simulation, etc.)\n            \"tasks\": \"tasks.jsonc\",\n            // Settings regarding the solution algorithm\n            // that is used to solve the optimization problem\n            // (decomposition strategy, discretization, etc.)\n            \"algorithm\": \"algorithm.jsonc\",\n            // Defines the scenarios that are used to the\n            // optimization, including the scenario generation\n            // model and its parameters\n            \"scenarios\": \"scenarios.jsonc\",\n            // Defines the system that is being optimized,\n            // with all the hydro plants, thermal plants, \n            // load buses and exchange lines.\n            \"system\": \"system.jsonc\",\n            // Defines the constraints that are used in some\n            // problems, in a generic way\n            \"constraints\": \"constraints.jsonc\"\n        }\n    }\n}","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The names of the directory data and all files it contains are flexible, meant to be spelled ou to main.jsonc. ","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"System elements, such as hydros, buses, etc. all get their own unique input file. These are tabular format, in which each line represents one element (i.e. one hydro, one bus, etc.)","category":"page"},{"location":"man/getting_started/#Outputs","page":"Getting Started","title":"Outputs","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once main() finishes, the user will find a new directory named out in the data_dir originally passed to main(). Note that this output path can be modified in the tasks.jsonc file.","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"This new folder contains, by default:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"an echo of the input data\na PARQUET file of the approximation cuts constructed during the policy computation\na PARQUET file all decicion variables monitored during simulations run on the computed policy","category":"page"},{"location":"#SDDPlab.jl","page":"Introduction","title":"SDDPlab.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the SDDPlab.jl documentation!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This page aims to provide all the necessary information and guides for using and extending SDDPlab.jl's functionality","category":"page"},{"location":"#What-is-SDDPlab.jl?","page":"Introduction","title":"What is SDDPlab.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"As the name implies, this package is meant to be a small scale laboratory for development of new methodologies related to Stochastic Dynamic Dual Programming, focused on hydrothermal optimal dispatch problems. To this end, SDDPlab.jl standardizes and automates all the definition and building of the power system and uncertainties' stochastic processes.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This package has SDDP.jl as its main backend, for running the actual SDDP algorithm, i.e. the actual execution of the cutting plane approximation once the linear program at each node is built. This means that SDDPlab.jl is focused not on the actual solving of the MSLP, buy on how to best model challenging aspects of the long-term planning problem.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"It is built with extensibility in mind, so that new system elements, statistical models and any other representation within the problem can be implemented fairly easily, without large scale modifications to the overall structure of the package.","category":"page"},{"location":"#Found-a-bug-and/or-error?","page":"Introduction","title":"Found a bug and/or error?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Please report all unexpected behavior by opening an issue","category":"page"},{"location":"#Package-Manual","page":"Introduction","title":"Package Manual","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\"man/getting_started.md\"]\nDepth = 2","category":"page"}]
}
